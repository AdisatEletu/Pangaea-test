{"ast":null,"code":"var _jsxFileName = \"/Users/softcom/Documents/pangea-test/src/contexts/ProductContext.tsx\",\n    _s = $RefreshSig$();\n\nimport produce from \"immer\";\nimport React, { createContext, useCallback, useReducer } from \"react\";\nimport { client } from \"../gql\";\nimport { GET_ALL_PRODUCTS } from \"../gql/queries/product\";\nimport { DEFAULT_CURRENCY } from \"../utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProductContext = /*#__PURE__*/createContext({});\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"set_products\":\n      return action.products;\n\n    default:\n      return state;\n  }\n};\n\nconst ProductContextProvider = props => {\n  _s();\n\n  const [state, dispatch] = useReducer(produce(reducer), []);\n  const {\n    children\n  } = props;\n  const getProducts = useCallback(async currency => {\n    try {\n      const res = await client.query({\n        query: GET_ALL_PRODUCTS,\n        variables: {\n          currency: currency !== null && currency !== void 0 ? currency : DEFAULT_CURRENCY\n        }\n      });\n      const products = res.data.products;\n      dispatch({\n        type: \"set_products\",\n        products\n      });\n      return products;\n    } catch (e) {\n      // TODO: handleErrors\n      return [];\n    }\n  }, []);\n\n  const updateProducts = products => {\n    dispatch({\n      type: \"set_products\",\n      products\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProductContext.Provider, {\n    value: {\n      getProducts,\n      products: state,\n      updateProducts\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProductContextProvider, \"uCgTX0uMVMBDAvn9a9Oyz+KHMG0=\");\n\n_c = ProductContextProvider;\nexport default ProductContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductContextProvider\");","map":{"version":3,"sources":["/Users/softcom/Documents/pangea-test/src/contexts/ProductContext.tsx"],"names":["produce","React","createContext","useCallback","useReducer","client","GET_ALL_PRODUCTS","DEFAULT_CURRENCY","ProductContext","reducer","state","action","type","products","ProductContextProvider","props","dispatch","children","getProducts","currency","res","query","variables","data","e","updateProducts"],"mappings":";;;AACA,OAAOA,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,EAAwCC,WAAxC,EAAqDC,UAArD,QAAuE,OAAvE;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAIA,OAAO,MAAMC,cAAc,gBAAGN,aAAa,CAAC,EAAD,CAApC;;AAEP,MAAMO,OAAO,GAAG,CAACC,KAAD,EAAoBC,MAApB,KAA8C;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,aAAOD,MAAM,CAACE,QAAd;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAPD;;AASA,MAAMI,sBAAsB,GAAIC,KAAD,IAAgB;AAAA;;AAC7C,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBZ,UAAU,CAClCJ,OAAO,CAACS,OAAD,CAD2B,EAElC,EAFkC,CAApC;AAIA,QAAM;AAAEQ,IAAAA;AAAF,MAAeF,KAArB;AACA,QAAMG,WAAW,GAAGf,WAAW,CAC7B,MAAOgB,QAAP,IAAiD;AAC/C,QAAI;AACF,YAAMC,GAAgD,GACpD,MAAMf,MAAM,CAACgB,KAAP,CAAa;AACjBA,QAAAA,KAAK,EAAEf,gBADU;AAEjBgB,QAAAA,SAAS,EAAE;AAAEH,UAAAA,QAAQ,EAAEA,QAAF,aAAEA,QAAF,cAAEA,QAAF,GAAcZ;AAAxB;AAFM,OAAb,CADR;AAKA,YAAMM,QAAoB,GAAGO,GAAG,CAACG,IAAJ,CAASV,QAAtC;AACAG,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAE,cADC;AAEPC,QAAAA;AAFO,OAAD,CAAR;AAKA,aAAOA,QAAP;AACD,KAbD,CAaE,OAAOW,CAAP,EAAU;AACV;AACA,aAAO,EAAP;AACD;AACF,GAnB4B,EAoB7B,EApB6B,CAA/B;;AAuBA,QAAMC,cAAc,GAAIZ,QAAD,IAA0B;AAC/CG,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,EAAE,cADC;AAEPC,MAAAA;AAFO,KAAD,CAAR;AAID,GALD;;AAOA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AAAEK,MAAAA,WAAF;AAAeL,MAAAA,QAAQ,EAAEH,KAAzB;AAAgCe,MAAAA;AAAhC,KADT;AAAA,cAGGR;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA3CD;;GAAMH,sB;;KAAAA,sB;AA6CN,eAAeA,sBAAf","sourcesContent":["import { ApolloQueryResult } from \"@apollo/client\";\nimport produce from \"immer\";\nimport React, { createContext, Reducer, useCallback, useReducer } from \"react\";\nimport { client } from \"../gql\";\nimport { GET_ALL_PRODUCTS } from \"../gql/queries/product\";\nimport { DEFAULT_CURRENCY } from \"../utils/constants\";\nimport { IProduct, IProductContextProps } from \"../utils/interfaces\";\nimport { ProductAction } from \"../utils/types\";\n\nexport const ProductContext = createContext({} as IProductContextProps);\n\nconst reducer = (state: IProduct[], action: ProductAction) => {\n  switch (action.type) {\n    case \"set_products\":\n      return action.products;\n    default:\n      return state;\n  }\n};\n\nconst ProductContextProvider = (props: any) => {\n  const [state, dispatch] = useReducer<Reducer<IProduct[], ProductAction>>(\n    produce(reducer),\n    []\n  );\n  const { children } = props;\n  const getProducts = useCallback(\n    async (currency: string): Promise<IProduct[]> => {\n      try {\n        const res: ApolloQueryResult<{ products: IProduct[] }> =\n          await client.query({\n            query: GET_ALL_PRODUCTS,\n            variables: { currency: currency ?? DEFAULT_CURRENCY },\n          });\n        const products: IProduct[] = res.data.products;\n        dispatch({\n          type: \"set_products\",\n          products,\n        });\n\n        return products;\n      } catch (e) {\n        // TODO: handleErrors\n        return [];\n      }\n    },\n    []\n  );\n\n  const updateProducts = (products: IProduct[]) => {\n    dispatch({\n      type: \"set_products\",\n      products,\n    });\n  };\n\n  return (\n    <ProductContext.Provider\n      value={{ getProducts, products: state, updateProducts }}\n    >\n      {children}\n    </ProductContext.Provider>\n  );\n};\n\nexport default ProductContextProvider;\n"]},"metadata":{},"sourceType":"module"}