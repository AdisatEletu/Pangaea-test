{"ast":null,"code":"var _jsxFileName = \"/Users/softcom/Documents/Pangaea-test/src/contexts/ConfigContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ConfigContext = /*#__PURE__*/createContext({});\n\nconst ConfigContextProvider = props => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleDrawer = () => {\n    setIsOpen(open => !open);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ConfigContext.Provider, {\n    value: {\n      isOpen,\n      toggleDrawer\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfigContextProvider, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n\n_c = ConfigContextProvider;\nexport default ConfigContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigContextProvider\");","map":{"version":3,"sources":["/Users/softcom/Documents/Pangaea-test/src/contexts/ConfigContext.tsx"],"names":["createContext","useState","ConfigContext","ConfigContextProvider","props","isOpen","setIsOpen","toggleDrawer","open","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAGA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,CACxC,EADwC,CAAnC;;AAIP,MAAMG,qBAAqB,GAAIC,KAAD,IAAgB;AAAA;;AAC5C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAU,KAAV,CAApC;;AAEA,QAAMM,YAAY,GAAG,MAAY;AAC/BD,IAAAA,SAAS,CAAEE,IAAD,IAAU,CAACA,IAAZ,CAAT;AACD,GAFD;;AAGA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLH,MAAAA,MADK;AAELE,MAAAA;AAFK,KADT;AAAA,cAMGH,KAAK,CAACK;AANT;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAhBD;;GAAMN,qB;;KAAAA,qB;AAkBN,eAAeA,qBAAf","sourcesContent":["import { createContext, useState } from \"react\";\nimport { IConfigContext } from \"../utils/interfaces\";\n\nexport const ConfigContext = createContext<IConfigContext>(\n  {} as IConfigContext\n);\n\nconst ConfigContextProvider = (props: any) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const toggleDrawer = (): void => {\n    setIsOpen((open) => !open);\n  };\n  return (\n    <ConfigContext.Provider\n      value={{\n        isOpen,\n        toggleDrawer,\n      }}\n    >\n      {props.children}\n    </ConfigContext.Provider>\n  );\n};\n\nexport default ConfigContextProvider;\n"]},"metadata":{},"sourceType":"module"}